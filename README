ver6 2011-11-23
linux, x86, 64
working_sandbox_ver_6.7z
restructurization, further code ripping, patches, refactoring
--------------------------------------------------------------------------------
  code base has been reduced
  several components has been removed. this is the short list of changes:
  trusted/handle_pass/ldr_handle.h -- removed with its folder "handle_pass"
  trusted/desc/pepper/nacl_pepper.c --removed
  trusted/desc/pepper/nacl_pepper.h -- removed
  trusted/desc/nacl_desc_quota.c -- removed
  trusted/desc/nacl_desc_quota.h -- removed
  trusted/service_runtime/win/exception_patch/ntdll_patch.h - removed  
  trusted/service_runtime/generic_container/container.c - removed
  trusted/service_runtime/generic_container/container.h - removed
  include/win/mman.h -- removed
  trusted/debug_stub/ -- removed
  service_runtime/nacl_debug_init.h --removed
  service_runtime/nacl_oop_debugger_hooks.h --removed
  service_runtime/linux/nacl_oop_debugger_hooks.c -- removed
  trusted/gdb_rsp/ -- removed
  shared/srpc/ -- removed
  trusted/service_runtime/nacl_kern_services.c -- removed
  trusted/manifest_name_service_proxy/ -- removed
  trusted/service_runtime/name_service/ -- removed
  valgrind support has been removed together with srpc.
  ...
  ... removed a lot of files and folders
  ... a lot of fixes has been made to the code
    
  current project folder structure is:
  api/
  gtest/
  include/
  obj/
  samples/
  src/
  test/
  
  all source code has been joined in the new place: "src/".
  "shared/" and "trusted" exists no more.
  "shared/imc" and "trusted/imc" now dwell in "src/imc"
  google testing framework lies in the same place "gtest/", same for "include/"
  
  notes:
  name service has been removed. appropriate sysall should be removed as well.
  i leave it until whole syscall module will be removed

  TODO:
  conspect all changes
  test zerovm as full as possible
    


ver5.6  2011-11-19

2011-11-18
linux, x86, 64
working_sandbox_ver_5.5.7z
file mapping
--------------------------------------------------------------------------------
  in a few words:
  - nexe can get manifest throush argv[0]. special header files is needed.
  - 2 mapped files can be available for nexe: input and output. it's pointers and sizes can be obtained through manifest (see above)
  - mapped output automatically updates. in other words any changes made by nexe will be stored in output.
  
  input mapped file is a file specified in "master manifest" given to zerovm by proxy. zerovm will map it to nexe memory before nexe start
  and pass pointer (and size) of that memory region to nexe via nexe stack (in argv[0]). if no input specified by manifest - NULL will be
  given to nexe. input is always read only.
  output mapped file -- same as above except the memory has read/write access.
  
  manifest parser has massive changes. format is changed. duplicate keys now are supported. now we have 3 types of manifests:
  master - manifest given by proxy
  minor - manifest passing to nexe by zerovm (is subset of master + links to mapped input/output)
  report - manifest givem to proxy by zerovm
  
2011-11-19
linux, x86, 64
working_sandbox_ver_5.6.7z
file mapping
--------------------------------------------------------------------------------
  fixes to report.
  some functions were rewritten.
  mallocs were replaced by stack memory (when possible).
  more minor fixes.
  
  the final version of current milestone.
 


ver 5.3 2011-11-9
linux, x86, 64
working_sandbox_ver_5.3.7z
makefile instead of bash build script (big thanks goes to camuel and oleg)
--------------------------------------------------------------------------------
    fixes to get rid of compilation warnings:
        nacl_desc_base.c -- small change in define to avoid compiler warnings (marked with "d'b" comment)
        C:\1\trusted\validator\x86\nc_inst_bytes_tests.cc -- small syntax fixes
        C:\1\trusted\validator\x86\nc_remaining_memory_tests.cc -- small syntax fixes
        C:\1\trusted\validator\x86\halt_trim_tests.cc -- small syntax fixes
        C:\1\trusted\validator\x86\decoder\nc_inst_state_tests.cc -- small syntax fixes
        C:\1\trusted\validator\x86\decoder\gen\ncop_expr_node_kind.h -- small syntax fixes
        C:\1\trusted\validator\x86\decoder\gen\ncop_expr_node_flag.h -- small syntax fixes
        C:\1\trusted\validator\x86\decoder\gen\ncopcode_operand_flag.h -- small syntax fixes
        C:\1\trusted\validator\x86\decoder\gen\ncopcode_operand_kind.h -- small syntax fixes
        C:\1\trusted\validator\x86\decoder\gen\ncopcode_opcode_flags.h -- small syntax fixes
        C:\1\trusted\validator\x86\decoder\gen\ncopcode_insts.h -- small syntax fixes
        C:\1\trusted\validator\x86\decoder\gen\ncopcode_prefix.h -- small syntax fixes
        C:\1\shared\utils\debugging.h -- small syntax fixes

    sel_ldr renamed to zerovm. the project obtained official name:
    "ZERO VM" which means: lightweight virtual machine.

    the "lib" folder exist no more. intermediate part of it goes to "obj" folder and libgtest.a - to "gtest"

    extra folder added to the project: "samples". so far the folder hold small "sort" project.

    TODO:
        zerovm bugfix. something wrong with "clock()". it returns invalid time. same program compiled with regular gcc version work fine
        complete with input (and maybe output) file mapping
        unit test for my zerovm code:
            "trusted\service_runtime\manifest_parse.c" - parse as many cases as i can imagine. don't forget about getkey()
            "trusted\service_runtime\manifest_parse.h" -- same as line above
            "trusted\service_runtime\zmq_syscalls.c" -- show open/close/read/write case successful/failed. test for isswifturl().
                                                                                                    open question how to make tests for "file mapping" part. put that case aside.
            "trusted\service_runtime\zmq_syscalls.h" -- same as line above
            also massive changes were made in "trusted\service_runtime\sel_main.c" main() how to make test? better way is
            to rewrite main() and put my code into separate file(s)
            

ver5.2 2011-11-8
linux, x86, 64
working_sandbox_ver_5.2.7z
added manifest, command line switches were revised
--------------------------------------------------------------------------------
    manifest is the file provided in the command line with switch "-M". manifest can contain nexe file name, log file name,
    nexe comamnd line (can contain up to 128 space delimited options). also manifest can contain any (key = value) pairs, for
    example it can be mapped file mapping (will be available in the next release). any switches cannot be duplicated with sel_ldr
    command line.

    keys supported by current version of manifest:
        "nexe" - file name of a nexe to load
        "log" - file name of a sel_ldr log
        "cmdline" - command line parameteres to give to loaded nexe
        "input" - (under construction) file with input data to map into the nexe memory
        "output" - (under construction)

    a new source files were added:
        "trusted\service_runtime\manifest_parse.c"
        "trusted\service_runtime\manifest_parse.h"

    TODO:
        complete with input (and maybe output) file mapping


ver5 2011-10-28
linux, x86, 64
working_sandbox_ver_5.7z
--------------------------------------------------------------------------------
    despite the version number this is an intermediate version. the sandbox is prepared to integrate zmq.
    mock functions implemented. now the file names with "http://" have special meaning - they are a channels.
    proposed user API would be normal "file access" with a special names where the user program can get/set
    the data using standart libc functions (like fread(), fwrite() e.t.c.)

    four syscalls from "trusted\service_runtime\nacl_syscall_common.c" are changed:
        - NaClCommonSysOpen()
        - NaClCommonSysClose()
        - NaClCommonSysRead()
        - NaClCommonSysWrite()

    the files
        "shared\platform\linux\nacl_host_desc_types.h"
        "shared\platform\linux\nacl_host_desc.c"
    has appropriate changes (marked with "d'b")

    two new files has been added:
        "trusted\service_runtime\zmq_syscalls.c"
        "trusted\service_runtime\zmq_syscalls.h"
    the files contain functions to integrate zmq calls

    TODO:
        remove generic container. i found that "container.c" and "container.h" are not used by sandbox.
        btw, it contain hashtable class. may be useful, maybe not. put it aside.


ver 4.2 2011-10-20
linux, x86, 64
working_sandbox_ver_4.2.7z
command line option "-Y" redesigned. added a new restricted syscalls behavior
--------------------------------------------------------------------------------
    the "-Y" switch now have options: [0,1,2]. by default "-Y0" assumed even when not specified.
    - 0: abort when restricted syscall encountred
    - 1: silently ignore restricted syscalls
    - 2: allow all syscalls

    warning about enabled syscalls is now placed to WARN_LOG

    now there is no need to specify "-a" (enable disk i/o) switch with "-Y": all means "all".


ver4.1 2011-10-10
linux, x86, 64
working_sandbox_ver_4.1.7z
version with optional syscalls and unit tests. folder structure changed
--------------------------------------------------------------------------------
  to reduce size of sandbox package some changes were made:

  "native_client/src/" moved to a new location "/" (to sandbox root folder)
  "base/" moved to a new location "include/base/"
  "build/" moved to a new location "include/build"
  "nacl_syscall_handlers.c" moved to a new location "trusted/service_runtime/nacl_syscall_handlers.c"
  "obj/" folder is added. here we store an object files. after sel_ldr built all ".o" files will be removed
  "tests/" renamed to "test/"
  "sel_ldr_chrome.c" removed from the package

  includes are changed to fit a new order

  todo:

  in the next version replace the build script with the makefile

ver4 2011-10-8
linux, x86, 64
working_sandbox_ver_4.7z
version with optional syscalls and unit tests
--------------------------------------------------------------------------------
    two main features now are available:
    - new option "-Y" - allow syscalls (by default syscalls restricted to   SysbrkDecoder, ExitDecoder, Thread_ExitDecoder,
    Tls_InitDecoder, Tls_GetDecoder and null)
    - unit tests. five binaries with several tests each. to extract appropriate test the logger was used (see "3. unittests.txt")

    syscals behavior is changed. in restricted mode (default) forbidden syscall cause abort and death message in log.
    when "-Y" switch specified all syscalls are available and sandbox show WARNING on screen. warning is not logged.

    also building scripts are reduced to one: "sandbox.sh". the script compile object files, construct libraties, build sandbox
    and at the end compile and run unit tests. when tests complete intermediate files will be removed.

    google test engine added to sandbox project: "libgtest.a" library and folder "gtest" with header files.

    sandbox sources renewed from the newest nacl package. some files were changed (added and removed).



2011-00-30
linux, x86, 64
working_sandbox_ver_3.7z
version without syscalls. intermediate version. reduced file list
--------------------------------------------------------------------------------
    the only difference between this and previous versions is the smaller size of source distribution.
    i managed to remove some needless header files and "sel_main_chrome.c".
    some folders were removed completely with its content: valgrind (since it only needs
    for user nexes), toolchain (same reason). scattered files for windows/osx platforms and arm were removed as well.

    build script patched and work correctly. sel_ldr (sandbox) i made with the new source
    distribution is exactly same as before (now it is 2805563 bytes only against 3900085 before)

    latest note: sel_main_chrome.c was removed from distribution (so now sel_ldr binary differ from previous version:
        some part of elf header and 1 byte in .text). actually it is strange because sel_main_chrome does not contain
        parts used in sandbox files

    native_client\src\trusted\service_runtime\win\exception_patch\ntdll_patch.h (this header disabled now and excluded from distr)
        included from "sel_main.c" ("sel_main.c" still had #include string commented out by me)
    native_client\src\include\win\mman.h (this header only contain a couple of defines that needed to build
    sel_ldr under linux: PROT_READ and PROT_WRITE)
        included from "sel_ldr_standard.c"


2011-09-29
linux, x86, 64
working_sandbox_ver_2.7z
version without syscalls
--------------------------------------------------------------------------------
    2nd version of sandbox. some of syscalls still left untouched because they work in process of load/exit nexe.
    without them (or part of them) nexe cannot be loaded and cannot be run (for example we will always get
    "segmentation fault" w/o exit syscall)

    there are no binaries in the archive. only sources and scripts

    sel_ldr - compiled sandbox. this version differ from the original (most of syscalls are absent)

    building scripts are fixed. extra "-I" options were removed. all absolute pathes changed to relative.
    all libraries will be placed to one temporary folder. after sandbox compilation all intermediate
    files (*.a, *.o) will be deleted.     script "build_all.sh" was added (now whole build process can
    be done in one keystroke).

    todo:

    yet more simplify directory structure (1st of all completely remove "scons_out" and make one folder for intermediate files)

    to solve problem with warnings (syscalls were not completely removed, just disables). now i see
    warnings "defined but not used" due compilation. "02._compile_all_sources.sh" should be changed.
    if solved i have to put back "-Werror" option (treat warnings as errors).

    to remove "step 1": "01._make_output_folders.sh" since we need additional folders no more (except only one)



2011-09-24
linux, x86, 64
working_sandbox_ver_1.7z
--------------------------------------------------------------------------------
    1st version (finally working!) of sandbox. there are binaries in the archive
    (object files, libraries and sel_ldr itself)

    sel_ldr - compiled sandbox. right now it has no changes comparing to original (google nacl) version

    todo:

    pathes in compilation scripts are absolute. i have in plans to change them to relative.

    there is one another problem: linker command line needs to be rewritten. i added
    a new -L???? to link sel_ldr with sandbox libraries, now all libs should be
    placed to one dir instead of being taken from original locations.


GLOBAL TODO
    write code to allow sandbox take some switches from the configuration
    "sel_ldr_x86.h" contain definition of "NACL_THREAD_MAX". move it to configuration