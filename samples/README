this folder contain both samples of zerovm usage and functional tests (especially in "security/" folder)

hello/
  simple example how to write a program for zerovm. since current version of zerovm does not contain
  syscalls (except *alloc()/free()) it is not allowed to use any i/o directly. instead of it user program
  can exploit user log. hello_world.c is an example of it.
  
onering/  
  this code tests a new functionality - trap() - universal tonneling syscall. instead of calling 55+ system 
  functions through mechanism offered by old google sel_ldr, zerovm uses only one syscall. in the nearest future
  via this mechanism user program will invoke syscalls from untrusted library (see "zrt" on our github page)
  
pagination/
  to allow user program manipulate data without syscalls zerovm grants access to two streams: input and output
  "input" is read only stream and "output" can be read or written. file names will be specified in manifest 
  (this information is not available for the user program). limits/sizes and other details about streams also 
  provided in manifest. limits are available (in read only mode) for user. further details can be found in
  the source code: "paging_test.c"
  
sort/
  contains 3 programs which allows to create random data, sort it and test sort order. from this example you can
  see how to use intrinsics in nacl modules - absolutely same as usual. also this is another example of pagination
  mechanism usage.
  
disort/
  distributed sorting, contains 2 user application that interacts as nodes implements networking communication, it uses
  files as one-to-one network channels. It uses for sse41 bitonic sorting and for another cpu instruction sets qsort 
  algorithm from c standard library. currently 10 source, 10nodes and single manager node.   
  
syscallback/
  another innovation for zerovm. this mechanism allows user to intercept all syscalls (except trap()). with zrt 
  library it gives ability to avoid real system calls usage. almost anything can be done without exploiting trusted
  code. there are however some exceptions (like system time and date, nanosleep and some other). syscallback was
  invented in order to keep nacl modules deterministic and in same time allow user to use already written code used
  syscalls. from the simple example you can see how it works. for further details consult "syscallback" section of
  zerovm documentation
  
user_log/
  simple but powerfull mechanism which allow user program log any events without using any syscalls. all logged messages
  will be saved in file specified in manifest. can be used for debugging purposes.
  
x264/
  contain instruction how to build best available open source video codec. however, this code will work under old zerovm
  versions (with syscalls) or after zrt library will be completed
  
security/
  contains several zerovm tests. these sources are not examples! they test possible zerovm security issues.
  the set of the tests will be extended in the future
  
