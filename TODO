in the current version:
-------------------------------------------------------------
todo
- check array fields in common part. must garantee that user will get NULL if field is not set
- move trap.c to service_runtime/
-+ solve problem with the channels count: how to inform user side, or how to
  give channels descriptors to user side passing given UserManifest object?
  +temporary solution: preallocated array to hold as much as 1024 channels
  another solution: untrusted code will invoke trap setup twice - 1st time to get number of channels
                    and 2nd time to get channels information (space must be provided)
  yet another solution: allocate memory from user space and return user the pointer
+ do something with SET_LIMIT macro. and move it to "tools.h"
	not moved but replaced with more safe version. macro from manifest_parser.h is used
+- replace COND_ABORT() macro to something more finished and strict:
  any fail cases which must terminate nacl should be logged to nacl log
  any "impossible fail" must be checked by assert() (main purpose: prevent improper zerovm code changes/usage)
  any non fatal cases must use something else (not "ABORT")

in the next version:
-------------------------------------------------------------
- move everything about "NETWORKING" to prefetch (task for yaroslav?)
  if impossible - remove "prefetch"
- put all invocations of manifest initializations to nacl init modules
- make defines (or something else) to hold manifest keywords and use it
  instead of "magic" strings. defines should be put into "manifest_keywords.h"
- remove not nessessary switches from zerovm command line
  only manifest, debug and validator switches must remain
- move all error messages and codes to nacl_error_code.* (especially from sel_main.c and manifest/)
  note: except fatal errors
  WARNING: get familiar with UMA first. perhaps it is not so good to update its error codes
- all NETWORKING "todo" comments and NETWORKING conditional compilation must be removed
  appropriate changes should be made, of course
- make 5 channel types: stdin (c99), stdout(c99), netin, netout, cdr(random read, append only write)
  ? what for do we need c99 stdin/stdout? stdout(stderr) will be lost after nexe exit. stdin(keyboard)
  just useless, if not redirected stdin is always empty. if redirected, represent r/o data which we
  can emulate via cdr. actually c99 stdin/stdout/stderr can be emulated via cdr
  
- make one extra trap() function - set_syscallback(). because using trap() setup for it
  has potentially problem and yet look ugly.
- nacl log. discuss with other members of our group. i would propose make the log constant:
  pro: 
    - zerovm can use log much earlier and therefore keep more advanced statistics / error msgs
    - with constant log zerovm always can log. now it can log only if specified in manifest
      if not - log will be shown on the screen
  contra:
    - less flexibility with log naming (can be solved with constant log)
    - use disk space (can be solved with pipe to stdin/stderr)    
- gather and classify all internal error codes to one enumeration
  perhaps it would be a good idea to include "src/service_runtime/include/sys/errno.h"
  (and other headers with error/return codes)
- write more strict channels dealocation: free all allocated memory, free nacl descriptor e.t.c
- make timeout engine instead of useless ResumeCpuClock() and PauseCpuClock()
- i need to decide what nacl syscalls will be counted against max_syscall:
  1. all
  2. existing only
  3. trap()
  4. only those who translated to the real system calls -- GOOD CANDIDATE
  5. none

in the future versions:
-------------------------------------------------------------

comments (to place to zerovm code):
- manifest initializators need:
  dyn_array ready, 
  mem manager from sel_mem constructed,
  

