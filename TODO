- split prefetch.* into prefetch and name service. name service should have a very simple api:
  - init / dispose
  - the 2nd pass to connect channels. used from mount_channels.c: KickNetworkChannels()
  - give_url() / get_url()
- add new unit tests
  - channels: mount channels, preload, prefetch, nameservice (how to test network channels?)
  - trap
- update /readme (use "force" to make the user download nacl sdk zerovm currently uses) 
- unify logging system, refactor all logs
- redesign src/ folders. find proper place for each file of th project. get read of src/include
- order initialization and finalization procedures in sel_main
- move all error messages and codes to nacl_error_code.* (especially from sel_main.c and manifest/)
  note: except fatal errors
  WARNING: get familiar with UMA first. perhaps it is not so good to update its error codes
- gather and classify all internal error codes to one enumeration
  perhaps it would be a good idea to include "src/service_runtime/include/sys/errno.h"
  (and other headers with error/return codes)
- there is snprintf usage, but this is c99 feature. replace it with sprintf with the buffer check
- replace (if possible) longjump with naclexit(). looks doable. problems are:
  - perf_counters
  - syslog finilizer (perhaps can be skipped)
  
global plan
-------------------------------------------------------------
19. read "man 2 flock" and try to make local channel locked.
    read only files can be read by multiple zerovms (but any changes to the file should be prohibited)
    write (r/w) files only can be accessed by 1 zerovm
+1. remove validator and clean up all project removing needless parts
   -+ remove imc
   + remove (almost all) desc
   - remove reference counter?
   - remove log
   -+ remove gio (or replace with very tiny version)
   - remove platform
   - remove platform_qualify
+2. add name service for the network channels
15. get rid of the needless platform describing folders: linux, x86, posix e.t.c.
16. some headers can be joined or even eliminated. same for particular .c files
17. include/ from zvm root should be distributed between src/ folder
3. redesign project structure
   api/
   doc
   src/
     - channels (all about channels)
     - loader (elf loader, user space, e.t.c.)
     - main (main, gio and scrapyard)
     - manifest (parser, setup, zvm config)
     - security (signals, platform qualifier, fault injection e.t.c.)
     - syscalls (nacl syscalls, trap, memory manager, trampoline)
     - tests (functional, unit, security tests and samples)
   thirdparty/
4. cover all source code with tests: unit, functional and security tests
5. rewrite project makefile. make it small, clean and clear
   add building options: debug, release (default), tests
6. add random read random write channels
7. redesign logging, remove nacl log code
8. allocate all zerovm memory in start of zerovm and remove "NULL checks"
9. zerovm error codes and states
10. zerovm setup: move all settings (defines, constants e.t.c.) to separate header
+- 11. reorganize and update the project documentation (and the source code comments)
12. add "snapshot" engine: memory dump and registers dump (using nacl nanosleep syscall)
13. write "blob" (the untrusted code loading before nexe start) 
!14. revive etag: md5 of user space. make an extended version with the output channels data
18. check the memory availability when untrusted code provides area to read/write
    it will allow get rid of signal SIGSEGV
19. add channel size? now it is coupled with pustsize (getsize) limit
997. write as much zerovm api examples as possible
998. the ultimate project source code refactoring
999. replace all third party code (so far it is zeromq) to prevent leaks, security holes and misbehaviour

