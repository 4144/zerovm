этот документ описывает пользовательский api

макроопределения, перечисления
------------------------------
ZVM_EOF - признак конца канала (см. "каналы")

enum AccessType - тип доступа. атрибут используется в описании каналов (см. "каналы") 
  SGetSPut - последовательное чтение и последовательная запись
  RGetSPut - произвольное чтение и последовательная запись
  SGetRPut - последовательное чтение и произвольная запись
  RGetRPut - произвольный доступ на чтение и запись.  

enum IOLimits - ограничения доступа. атрибут используется в описании каналов (см. "каналы")
  GetsLimit - разрешенное количество чтений
  GetSizeLimit - количество байт которое может быть прочитано
  PutsLimit - разрешенное количество записей
  PutSizeLimit - количество байт которое может быть записано

enum TrapCalls - функции trap (см. "функции")
  TrapRead - чтение из канала
  TrapWrite - запись в канал
  TrapSyscallback - перехват/освобождение системных вызовов
  TrapChannels - информация о каналах
  TrapChannelName - получение имени канала
  TrapAttributes - зарезервировано
  TrapSyscallsCount - счетчик системных вызовов
  TrapSyscallsLimit - ограничение на системные вызовы
  TrapMemSize - размер доступной оперативной памяти
  TrapHeapPtr - начало доступной оперативной памяти
  TrapExit - завершение пользовательской программы

типы данных zerovm api
-----------------------
struct ZVMChannel - описание канала (см. "каналы")
  limits - ограничения канала (см. enum IOLimits)
  size - размер канала. не установлено для каналов последовательного доступа
  type - тип доступа (см. "enum AccessType")
  name - имя канала

вызовы nacl (nacl syscalls)
---------------------------
  поддерживаются только 7 вызовов: 
  NACL_sys_sysbrk (20)
  NACL_sys_mmap (21)
  NACL_sys_munmap (22)
  NACL_sys_exit (30) - рекомендуется использовать аналогичную функцию trap()
  NACL_sys_mutex_create (70) - эмулируется. не рекомендуется к использованию
  NACL_sys_tls_init (82) - эмулируется. не рекомендуется к использованию 
  NACL_sys_tls_get (84) - эмулируется. не рекомендуется к использованию
  
  примечание:
  более подробная информация о системных вызовах накл может быть найдена в документации
  накл на сайте гугла

функции предоставляемые zerovm
------------------------------
  в zerovm введен дополнительный системный вызов - trap, соответствующий нулевому вызову 
  в таблице trampoline (см. "nacl syscalls"). trap обслуживает 10 функций (см. enum TrapCalls)
  для доступа к этому сервису рекомендуется использовать "обертки":
  
  struct UserManifest *zvm_init();
  инициализирует структуру содержащую всю информацию пользовательского "манифеста" 
  (см. struct UserManifest). функция должна вызываться перед использованием zerovm api.
  возвращает 0 в случае успеха и ненулевое значение при ошибке. 

  int32_t zvm_pread(int desc, char *buffer, int32_t size, int64_t offset);
  читает из канала с номером "desc" в область памяти "buffer" "size" байт. если канал 
  имеет произвольный доступ на чтение "offset" указывает позицию в канале с которой 
  производится чтение. для канала последовательного доступа значение offset игнорируется
  возвращает количество прочитанных байт, 0 - в случае конца канала или -1 при возникновении
  ошибки. код ошибки можно проверить, вызвав zvm_errno().

  int32_t zvm_pwrite(int desc, const char *buffer, int32_t size, int64_t offset);
  пишет в канал с номером "desc" из области памяти "buffer" "size" байт. если канал 
  имеет произвольный доступ на запись "offset" указывает позицию в канале в которую 
  производится запись. для канала последовательного доступа значение offset игнорируется.
  возвращает количество записанных байт, -1 при возникновении ошибки. код ошибки 
  можно проверить, вызвав zvm_errno().

  int32_t zvm_close(int desc);
  закрывает канал с номером "desc". в случае успеха возвращает 0, иначе -1 и 
  устанавливает код ошибки (см. "zvm_errno")

  int32_t zvm_exit(int32_t code);
  завершает программу

  void *zvm_heap_ptr();
  возвращает указатель на "кучу" или NULL если эта информация не доступна 
  (см. "struct UserManifest"). рекомендуется вместо этой функции использовать манифест

  uint32_t zvm_mem_size();
  возвращает размер пользовательской памяти (см. "struct UserManifest").

  int32_t zvm_syscallback(intptr_t addr);
  управляет механизмом перехвата системных вызовов (см. "syscallback"). в качестве
  параметра принимает указатель на обработчик системных вызовов. если функции
  передан 0. все системные вызовы обрабатываются zerovm (см. "nacl syscalls")
  возвращает указатель на текущий обработчик или 0 если обработка производится
  zerovm

  int32_t zvm_channel_name(struct ZVMChannel *channel, int ch);
  возвращает длину имени канала с номером "ch" если первый параметр NULL. 
  иначе заполняет соответствующее поле в переданной структуре именем канала "ch".
  в случае ошибки возвращает -1 и устанавливает код ошибки (см. "zvm_errno")
  пользователь должен позаботиться о выделении необходимого количества памяти под
  размещение имени. рекомендуется использовать манифест вместо вызова этой функции.

  int32_t zvm_channels(struct ZVMChannel *channels);
  возвращает количество каналов если передан NULL. иначе заполняет предоставленный
  массив информацией обо всех каналах. пользователь должен позаботиться о выделении
  необходимого количества памяти для размещения информации о каналах. вместо использования
  функции рекомендуется использовать манифест (см. "struct UserManifest")

  int32_t zvm_errno();
  возращает код последней ошибки возникшей при использовании функций trap(). использованы
  стандартные "errno" коды

  int32_t zvm_syscalls_limit();
  возращает ограничение на количество системных вызовов. рекомендуется вместо функции 
  использовать манифест (см. "struct UserManifest")

syscallback
-----------
  механизм позволяющий назначать обработчик для всех системных вызовов (см. "nacl syscalls")
  за исключением trap (см. "trap, trampoline,.."). более подробную информацию об устройстве
  trampoline, содержимом стека, способе передачи параметров функции, кода возврата и т.д.
  можно прочесть в соответсвующем документе native client на сайте гугл. пример обработчика
  системных вызовов можно найти в библиотеке zrt - syscall_manager.S

переменные
----------
struct UserManifest - комплексная неизменная информация. формируется zvm_init()-ом
  heap_ptr - начало доступной оперативной памяти. NULL означает, что zerovm не может
             предоставить возможность управлять распредением памяти. в этом случае
             пользователь не должен перехватывать nacl syscalls setbreak, mmap, munmap
  mem_size - размер памяти выделенной пользовательской программе. часть этой памяти уже 
             использована под стек, данные, код и т.д. т.е. реально доступное количество
             оперативной памяти всегда меньше указанного значения.
             примечание: размер стека 16мб, а heap_ptr указывает на первый свободный байт
             "кучи", т.о. можно подсчитать количество доступной памяти. 
  channels_count - количество доступных каналов
  channels - массив содержаний информацию о доступных каналах (см. "struct ZVMChannel")
  syscalls_limit - ограничение на количество системных вызовов (см. "вызовы nacl" и "функции")
  envp - массив указателей на строки (переменных окружения). каждая строка имеет формат 
         "key=value". последняя строка всегда NULL. указатель на массив так же доступен 
         третьим параметров функции main() 

каналы
------
  каналы реализуют файловую абстракцию над доступными zerovm средствами ввода/вывода. в данный
  момент это локальные файлы и сетевые соединения. количество доступных каналов неизменно для
  сеанса работы и известно сразу после инициалиции zerovm api (см. "zvm_init"). более подробную
  информацию об атрибутах каналов можно получить из "struct ZVMChannel". для обслуживания каналов
  предназначена часть функций trap (см. "функции"). гарантируется наличие 3х стандартных каналов:
  stdin, stdout, stderr.
  
  специальные каналы:
  stdin - стандартный ввод. канал последовательного доступа. только чтение. 
          сохранность данных не гарантируется.
  stdout - стандартный вывод. канал последовательного доступа. только запись.
          сохранность данных не гарантируется
  stderr - стандартный вывод ошибок. канал последовательного доступа. только запись.
          сохранность данных не гарантируется
  debug - отладочный канал. наличие не гарантируется. гарантируется сохранность данных

командная строка

переменные окружения

trap, trampoline и все остальное, что надо знать и не надо использовать.