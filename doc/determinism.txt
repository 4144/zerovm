документ описывает меры принимаемые zerovm для обеспечения детерминизма
(это предварительная версия документа)

о каком детерминизме речь?
zerovm гарантирует, что одинаковые nacl modules (nexe) запущенные с одинаковыми настройками 
на одинаковых данных сгенерируют одинаковые результаты. более того одинаковыми будут и снимки
памяти. в дальнейшем, может испольщоваться термин "принцип определенности".

для обеспечения детерминизма используются следующие средства:
1. nacl sdk. обеспечивает построение nacl модулей - исполняемые, легко валидируемые
   файлы
2. ncval: nacl validator. программа для проверки nacl модулей.
3. каналы - файловая абстракция над данными (см. channels.txt)
4. запрет всех nacl syscalls кроме безопасных для детерминизма
5. проверка платформы на которой запущен zerovm
6. резервирование пользовательских ресурсов до запуска пользовательского кода и
   и их освобождение только после завершения работы пользовательского кода
7. перехват сигналов и аварийное завершение zerovm в случае возникновения ошибки.
   в этом случае результаты работы пользовательской программы должны быть отброшены
8. вычисление sha1 хэш-значения памяти и данных после завершения nexe (etag). для 
   одинаковых заданий (одинаковые nexe запущенные на одних данных с одними настройками)
   это значение будет одинаковым. и наоборот, совпадение etag-ов, с большой вероятностью
   (в пределах возможностей sha1) означает совпадение заданий.
   
проблемы связанные с детерминизмом:
- nacl sdk и nacl validator позволяют использовать инструкцию RDTSC (см. issue #67). для
  этой проблемы найдено временное решение.
- не исследован набор доступных nacl инструкций. неизвестно есть ли среди них "опасные" для 
  "принципа определенности"
- рандомальное выделение памяти системой и базовый регистр nacl - r15. для
  этой проблемы найдено временное решение (см. issue #67).
- возможные утечки из "доверенного кода", связанные с вероятным несовершенством защиты zerovm
