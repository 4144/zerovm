This document describes ZeroVM security, how ZeroVM stands against possible attacks
-----------------------------------------------------------------------------------

We assume that original NaCl implementation is perfect and will analyze only the 
ZeroVM features that can affect the system security.

Syscallback
-----------
The most dangerous feature is the syscallback engine. User is allowed to set her own direct jump from 
the trusted space to the untrusted code. To prevent security leaks zerovm analyzes the given 
syscallback address. The address must point to a static or dynamic text, other addresses will
be treated as invalid. The address must be modulo of 0x20 to prevent jumping to the middle of
instruction. The address must not point to the segment end. In the current zerovm version all
this checks already exist. Syscallback doesn't change the stack, registers or memory thus no data leak
from the trusted space is possible.

trap()
------
The trap() engine contains several functions each of them can have bugs that lead to security
vulnerability. Therefore each trap() function must have full test coverage.

Other zerovm code
-----------------
Most dangerous are the functions that work when user application is running. These are: syscalls,
nacl_syscall_64.S, nacl_switch_64.S nacl_syscall_hook.c and some other code. All this code should
be covered with security tests.

Syscalls
--------
ZeroVM still uses several syscalls. Each syscall may possibly contain security vulnerability.
Every existing ZeroVM syscall must be covered with security tests.

Manifest
--------
Current version of the manifest is treated as secure. User can only view/change specific fields. However
security tests will be useful.

