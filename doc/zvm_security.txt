This document describes ZeroVM security, how ZeroVM stands against 
possible attacks
(up to date 2013-10-20, needs editing)
---------------------------------------------------------------------

We assume that original NaCl implementation is perfect and will analyze
only the ZeroVM features that can affect the system security.

trap()
------
The trap() syscall contains several functions each of them can have bugs
that lead to security vulnerability. Therefore each trap() function must
have full test coverage. Tests can be found in repository folder
/tests/functional/

Other zerovm code
-----------------
Most dangerous are the functions that work when user application is running.
These are: to_app.S, to_trap.S, syscall_hook.c, switch_to_app.c and trap.c.
All this code should be covered with security tests. Some tests can be found
in repository folder /tests/security. more tests incoming. 

Loader
--------
ZeroVM has some changes in user module loading process:
1. a new memory region added: user manifest. this is a read only memory area
   placed right before the user stack. user manifest contains information
   about channels, heap and stack
2. all nacl syscalls removed and populated by the uniform pattern calling
   always constant memory address 0x5afeca110000 (trap use same pattern)
3. command line arguments, environment and module name are not available
   from the user stack when session started. it is more safe to allow user
   module to parse all its command data on untrusted side. it is part of
   zerovm toolchain now.

Network channels
----------------
to send user data from one session to other, zerovm uses limited set of
functions from zeromq library v2.2.x. 

Manifest
--------
Current version of the manifest is treated as secure. User can only view
specific fields. However security tests will be useful.
