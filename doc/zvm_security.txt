this document describes zerovm security, how zerovm stand against possible attacks
----------------------------------------------------------------------------------

we assume original nacl does not contain security holes and will analyse only 
zerovm's specific features which can affect security.

syscallback
-----------
most dangerous feature is syscallback engine. user allowed to set his own direct jump from 
the trusted space to untrusted code. to prevent security leaks zerovm analyse given 
syscallback address. the address must point to static or dynamic text, other addresses will
be treated as invalid. the address must be modulo of 0x20 to prevent jumping to the middle of
instruction. the address must not point to the segment end. in the current zerovm version all
this checkings are exist. syscallback doesn't change stack, registers, memory so no data leak
from the trusted space is possible.

trap()
------
the trap() engine contain several functions each of them can contain bugs can lead to security
vulnerability. therefore each trap() function must have full coverage tests.

other zerovm code
-----------------
most dangerous zerovm is the code which work when user application is working. which is: syscalls,
nacl_syscall_64.S, nacl_switch_64.S nacl_syscall_hook.c and some other code. all this code should
be covered with security tests.

syscalls
--------
zerovm still have several syscalls. each syscall may possibly contain security vulnerability.
every existing zerovm syscall must be covered with security tests.

manifest
--------
current version of manifest treated as secure. user only can view/change allowed fields. however
security test will be useful.


