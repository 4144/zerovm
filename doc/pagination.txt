This document describes pagination engine
(the document is obsolete. channels.txt should be used instead)
(left alive until review and, perhaps, join with channels.txt)
-----------------------------------------

Pagination Engine (PE) is a replacement for input/output syscalls (were removed from zerovm). 
In a few words, using PE the user can read/write data specified in the manifest.

There are two ways (at least for now) to make the data available for the user: mapping the data into
the memory or reading/writing portions of the data from disk. User have no access
to things like file names/attributes/etc. but user can get the data and size of the data
from the manifest. Here is the list of the PE fields user can access:

max_syscalls -- limits the amount of syscalls allowed. Any PE invocation is treated as a syscall.
channels[] -- file channels/streams available for the user

  0 -- read-only stream (like stdin)
  1 -- read-write stream
  2 -- user log (like stderr)
  3 -- reserved
  4 -- reserved
  
  for each channel the following attributes (fields) are defined and available for the user:
  type -- type of the channel (see 5 channels above)
  fsize -- size of the data (if applicable)
  buffer -- contains mapped data. If the channel is not mapped the field is NULL
  bsize -- size of the mapped data (if applicable), otherwise - 0
  
  max_gets -- total number of reads allowed for the user (not applicable for mapped data)
  max_puts -- total number of writes allowed for the user (not applicable for mapped data)
  max_get_size -- total amount of bytes user can read (not applicable for mapped data)
  max_put_size -- total amount of bytes user can write (not applicable for mapped data)
  
  User also have access to the PE counters (see "zvm.h" from the zerovm api)

There is one more field: "mounted". This field describes the type of access to the underlying data. 
Either disk based access or memory mapped file for now, will be expanded in the future.

