this document must be reviewed and updated
------------------------------------------

1. validator + validator_x86- most important part of whole zvm project. taken untouched from nacl
2. gio - generic nacl io
3. imc - inter module communication
4. desc - threads, handles abstraction, shared memory, imc pieces
5. fault_injection
6. nacl_base - reference counter. part of memory management?
7. perf_counter - nacl timer, mostly used by log
8. platform - pretty fat platfrom detection engine, contain secure random, handles abstraction, log,
   small nacl fragments, semaphores, locks e.t.c. scrapyard.
9. platform_qualify - cpu detection, data execution prevention detection, os detection, shared map availability
10. utils - small nacl debug header and header with some defines (useless?)

11. manifest. contain 3 independent parts:
   - manifest part
   - channels mounting part (should be moved to gio)
   - trap (should lie near syscalls engine, service_runtime, i guess)
   and 2 independent functionalities:
   - filesize function (gio habitant?)
   - md5 class (to scrapyard)
   
12. runtime_service. scrapyard. contain:
   - dynamic array (used by memory manager)
   - elf loader
   - environment cleanser
   - zvm (nacl sandbox) initializer
   - threads support
   - error identifier for log engine
   - global resources handler
   - signals (for threads?)
   - syscalls engine
   - springboard (useless)
   - main() the main scrapyard
   - memory manager (part of elf loader)
   - threads nice
   - loader utils, headers and the project small pieces didn't fit to other folders
   
